package action;import java.io.UnsupportedEncodingException;import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;import java.util.HashMap;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.log4j.Logger;import rmi.corpusManger.CorpusMangerRmi;import rmi.messageCenter.MessageCenterRmi;import rmi.weibotService.WeibotServiceRmi;import weibo4j.org.json.JSONException;import weibo4j.org.json.JSONObject;import weiboApi.WeiboMsg;import com.opensymphony.xwork2.ActionSupport;import util.BuildRet;import util.Struts2Utils;public class TaskAction extends ActionSupport {	private static final long serialVersionUID = 1L;	private static Logger TaskActionLogger = Logger.getLogger(TaskAction.class);	private Map<String, Object> responseJson;	public Map<String, Object> getResponseJson() {		return responseJson;	}	public void setResponseJson(Map<String, Object> responseJson) {		this.responseJson = responseJson;	}	/**	 * 接受post请求，执行语料导入操作	 * 	 * @param pParameter	 *            json字符串，UID，StartID，EndID	 * @return success 将返回值以字符串形式set出去	 */	public String appendIndexAction() {		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;		try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			TaskActionLogger.info("appendIndexAction\tpost data\t"					+ contentType);			data = hsr.getParameter("data");			data = java.net.URLDecoder.decode(data, "UTF-8");			TaskActionLogger.info("appendIndexAction\tpost data\t" + data);			TaskActionLogger.info("————————————————————————————————");			json = new JSONObject(data);			TaskActionLogger.info("appendIndexAction\tnew json");			String UID = json.getString("UID");			TaskActionLogger.info("appendIndexAction\t" + UID);			String parameter = json.getJSONArray("Parameter").toString();			TaskActionLogger.info("appendIndexAction\tParameter");			String strCorGroupInfo = json.getString("CorGroupInfo");			CorpusMangerRmi cmr = (CorpusMangerRmi) rmiConnection(					strCorGroupInfo, "appendIndexAction");			retMap = cmr.appendIndex(json);			TaskActionLogger.info("appendIndexAction\tresult\t" + retMap);		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\tappendIndexAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (UnsupportedEncodingException e) {			retMap = BuildRet.returnErro(10000);			TaskActionLogger.info("Exception\tappendIndexAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\tappendIndexAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\tappendIndexAction\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;	}	/**	 * 接受post请求，执行语料删除操作 pParameter json字符串，UID，StartID，EndID	 * 	 * @return success 将返回值以字符串形式set出去	 */	public String deletedIndexAction() {		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;		try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			TaskActionLogger.info("deletedIndexAction\tpost data\t"					+ contentType);			data = hsr.getParameter("data");			TaskActionLogger.info("deletedIndexAction\tpost data\t" + data);			json = new JSONObject(data);			String strCorGroupInfo = json.getString("CorGroupInfo");			CorpusMangerRmi cmr = (CorpusMangerRmi) rmiConnection(					strCorGroupInfo, "deletedIndexAction");			retMap = cmr.deleteIndex(json);			TaskActionLogger.info("deletedIndexAction\tresult\t" + retMap);		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\tdeletedIndexAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\tdeletedIndexAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\tdeletedIndexAction\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;	}	/**	 * 语料关键字查询连接CorpusManger组件	 * 	 */	public String corpusKeywordsFilterAction() {		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;		try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			TaskActionLogger.info("corpusKeywordsFilter\tpost data\t"					+ contentType);			data = hsr.getParameter("data");			TaskActionLogger.info("corpusKeywordsFilter\tpost data\t" + data);			json = new JSONObject(data);			String strCorGroupInfo = json.getString("CorGroupInfo");			CorpusMangerRmi cmr = (CorpusMangerRmi) rmiConnection(					strCorGroupInfo, "corpusKeywordsFilter");			retMap = cmr.corpusKeywordsFilter(json);			TaskActionLogger.info("corpusKeywordsFilter\tresult\t" + retMap);		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\tcorpusKeywordsFilterAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\tcorpusKeywordsFilterAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\tcorpusKeywordsFilterAction\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;	}	/**	 * 消息查询功能连接MessageCenter组件	 */	public String messageKeywordsFilterAction() {		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;		try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			TaskActionLogger.info("messageKeywordsFilter\tpost data\t"					+ contentType);			data = hsr.getParameter("data");			TaskActionLogger.info("messageKeywordsFilter\tpost data\t" + data);			json = new JSONObject(data);			String strMsgGroupInfo = json.getString("MsgGroupInfo");			MessageCenterRmi mcr = (MessageCenterRmi) rmiConnection(					strMsgGroupInfo, "messageKeywordsFilter");			retMap = mcr.messageKeywordsFilter(json);			TaskActionLogger.info("messageKeywordsFilter\tresult\t" + retMap);		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\tmessageKeywordsFilterAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\tmessageKeywordsFilterAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\tmessageKeywordsFilterAction\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;	}	/**	 * 接受post请求，执行回复消息操作	 * 	 */	public String sendReplyAction() {		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;		try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			HttpServletResponse response = Struts2Utils.getResponse();			response.setCharacterEncoding("UTF-8");			response.setContentType("text/html;charset=utf-8");			TaskActionLogger.info("sendReplyAction\tpost data\t" + contentType);			data = hsr.getParameter("data");			TaskActionLogger.info("sendReplyAction\tpost data\t" + data);			json = new JSONObject(data);			String strMsgGroupInfo = json.getString("MsgGroupInfo");			MessageCenterRmi mcr = (MessageCenterRmi) rmiConnection(					strMsgGroupInfo, "sendReplyAction");			retMap = mcr.replyMessage(json);			TaskActionLogger.info("sendReplyAction\tresult\t" + retMap);		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\tsendReplyActions\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\tsendReplyActions\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\tsendReplyActions\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;	}	/**	 * 新用户获得授权后，在MessageCenter中添加新用户	 */	public String addUserAction() {		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;		try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			TaskActionLogger.info("addUser\tpost data\t" + contentType);			data = hsr.getParameter("data");			TaskActionLogger.info("addUser\tpost data\t" + data);			json = new JSONObject(data);			String strMsgGroupInfo = json.getString("MsgGroupInfo");			MessageCenterRmi mcr = (MessageCenterRmi) rmiConnection(					strMsgGroupInfo, "addUser");			retMap = mcr.addUser(json);			TaskActionLogger.info("addUser\tresult\t" + retMap);		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\taddUserAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\taddUserAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\taddUserActions\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;	}	/**	 * 删除用户	 * 	 * @return	 */	public String deleteUserAction() {		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;		try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			TaskActionLogger.info("deleteUser\tpost data\t" + contentType);			data = hsr.getParameter("data");			TaskActionLogger.info("deleteUser\tpost data\t" + data);			json = new JSONObject(data);			String strMsgGroupInfo = json.getString("MsgGroupInfo");			MessageCenterRmi mcr = (MessageCenterRmi) rmiConnection(					strMsgGroupInfo, "deleteUser");			retMap = mcr.deleteUser(json);			TaskActionLogger					.info("deleteUser MessageCenter\tresult\t" + retMap);		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\tdeleteUserAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\tdeleteUserAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\tdeleteUserAction\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;	}	/**	 * 修改用户设置	 * 	 * @return	 */	public String setUserInfoAction() {		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;		try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			TaskActionLogger.info("setUserInfo\tpost data\t" + contentType);			data = hsr.getParameter("data");			TaskActionLogger.info("setUserInfo\tpost data\t" + data);			json = new JSONObject(data);			String strMsgGroupInfo = json.getString("MsgGroupInfo");			MessageCenterRmi mcr = (MessageCenterRmi) rmiConnection(					strMsgGroupInfo, "setUserInfo");			retMap = mcr.setSetting(json);			TaskActionLogger.info("setUserInfo MessageCenter\tresult\t"					+ retMap);		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\tsetUserInfoAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\tsetUserInfoAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\tsetUserInfoAction\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;	}	public String setMsgAction(){		WeiboMsg weiboMsg = new WeiboMsg();		JSONObject json = null;		String data = "";		Map<String, Object> retMap = null;				try {			HttpServletRequest hsr = Struts2Utils.getRequest();			String contentType = hsr.getHeader("Content-Type");			TaskActionLogger.info("setMsg\tpost data\t" + contentType);			data = hsr.getParameter("data");			TaskActionLogger.info("setMsg\tpost data\t" + data);			json = new JSONObject(data);			String strMsgGroupInfo = json.getString("MsgGroupInfo");			String CMD ="",Uid ="",FileName="",FileContent="";			CMD = json.getString("IsUpdate");			Uid = json.getString("UID");//			FileName = ;//			FileContent =;			weiboMsg.setMsgInfo("CMD", CMD);			weiboMsg.setMsgInfo("Uid", Uid);			weiboMsg.setMsgInfo("FileName", FileName);			weiboMsg.setMsgInfo("FileContent", FileContent);						WeibotServiceRmi wsr = (WeibotServiceRmi) rmiConnection(					strMsgGroupInfo, "setUserInfo");//			retMap = wsr.setSetting(json);			wsr.processCMD(weiboMsg);									TaskActionLogger.info("setMsg weibotService\tresult\t"					+ weiboMsg.toString());		} catch (JSONException e) {			retMap = BuildRet.returnErro(00002);			TaskActionLogger.info("Exception\tsetMsgAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (Exception e) {			retMap = BuildRet.returnErro(10001);			TaskActionLogger.info("Exception\tsetMsgAction\t"					+ e.getLocalizedMessage() + retMap);		} catch (RemoteException e) {			retMap = BuildRet.returnErro(10002);			TaskActionLogger.info("Exception\tsetMsgAction\t"					+ e.getLocalizedMessage() + retMap);		}		setResponseJson(retMap);		return SUCCESS;			}		private Object rmiConnection(String pInfo, String pAction) throws Exception {		String[] split = pInfo.split(",");		String ip = split[0];		String port = split[1];		String name = split[2];		TaskActionLogger.info(pAction + "\trmi parameter\t" + ip + "\t" + port				+ "\t" + name);		Registry registry = LocateRegistry.getRegistry(ip,				Integer.parseInt(port));		Object obj = registry.lookup(name);		split = null;		return obj;	}}